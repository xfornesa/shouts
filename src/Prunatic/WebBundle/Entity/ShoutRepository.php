<?php
/**
 * Author: Xavier
 */

namespace Prunatic\WebBundle\Entity;

use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Prunatic\WebBundle\Entity\Shout;
use Prunatic\WebBundle\Entity\Point;

/**
 * ShoutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShoutRepository extends EntityRepository
{
    /**
     * Prepare base query builder object for visible Shouts
     *
     * @param int $offset
     * @param int $maxResults
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function qbVisibleShouts($offset = null, $maxResults = null)
    {
        $visibleStatus = array(Shout::STATUS_APPROVED);
        $qb = $this->createQueryBuilder('s');
        if (!is_null($offset)) {
            $qb->setFirstResult($offset);
        }
        if (!is_null($maxResults)) {
            $qb->setMaxResults($maxResults);
        }

        return $qb
            ->where(
                $qb->expr()->in('s.status', $visibleStatus)
            )
        ;
    }

    /**
     * Prepare a query builder for visible shouts ordered by created
     *
     * @see http://gist.github.com/arnaud-lb/2704404 to force use index
     * @see https://doctrine-orm.readthedocs.org/en/latest/cookbook/dql-custom-walkers.html?highlight=setHint#generic-count-query-for-pagination
     * @param int $offset
     * @param int $maxResults
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function qbNewestVisibleShouts($offset = null, $maxResults = null)
    {
        $qb = $this->qbVisibleShouts($offset, $maxResults);

        // TODO optimize query ordered by date and filtered by status, actually it does not use right indexes

        return $qb
            ->orderBy('s.created', 'desc')
            ->addOrderBy('s.id', 'desc')
        ;
    }

    /**
     * Get shouts approved ordered by created
     *
     * @param int $offset
     * @param int $maxResults
     * @return array
     */
    public function getNewestVisibleShouts($offset = 0, $maxResults = 10)
    {
        return $this->qbNewestVisibleShouts($offset, $maxResults)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Prepare a query builder for visible shouts ordered by total votes (top rated)
     *
     * @see http://gist.github.com/arnaud-lb/2704404 to force use index
     * @see https://doctrine-orm.readthedocs.org/en/latest/cookbook/dql-custom-walkers.html?highlight=setHint#generic-count-query-for-pagination
     * @param int $offset
     * @param int $maxResults
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function qbTopRatedVisibleShouts($offset = null, $maxResults = null)
    {
        $qb = $this->qbVisibleShouts($offset, $maxResults);

        // TODO optimize query ordered by total votes and filtered by status, actually it does not use right indexes
        return $qb
            ->orderBy('s.totalVotes', 'desc')
            ->addOrderBy('s.id', 'desc')
        ;
    }

    /**
     * Get visible shouts ordered by total votes
     *
     * @param int $offset
     * @param int $maxResults
     * @return array
     */
    public function getTopRatedVisibleShouts($offset = 0, $maxResults = 10)
    {
        return $this->qbTopRatedVisibleShouts($offset, $maxResults)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * Prepare a query for visible shouts ordered by distance to the coordinates
     *
     * @param Point $point
     * @param int $offset
     * @param int $maxResults
     * @return \Doctrine\ORM\NativeQuery
     */
    private function queryNearbyVisibleShouts(Point $point, $offset = null, $maxResults = null)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('Prunatic\WebBundle\Entity\Shout', 's');
        $fields = $this->_em->getClassMetadata('Prunatic\WebBundle\Entity\Shout')->getFieldNames();
        foreach ($fields as $field) {
            $rsm->addFieldResult('s', $field, $field);
        }

        $sql = "
            SELECT s.*
            FROM Shout s
            WHERE s.status IN('approved')
            ORDER BY GLength(LineString(s.point, GeomFromText(:coordinates))) * 100
            "
        ;
        $limit = '';
        if (!is_null($maxResults))
            $limit .= $maxResults;
        if (!is_null($offset))
            $limit .= ' OFFSET ' . $offset;
        if (!empty($maxResults))
            $limit = ' LIMIT ' . $maxResults;
        $sql .= $limit;

        $query = $this->_em->createNativeQuery($sql, $rsm);

        $pointType = Type::getType('point');
        $coordinates = $pointType->convertToDatabaseValue($point, $this->_em->getConnection()->getDatabasePlatform());
        $query->setParameter('coordinates', $coordinates);

        return $query;
    }

    /**
     * Get nearby visible shouts from a given coordinates
     *
     * @param Point $point
     * @param int $offset
     * @param int $maxResults
     * @return array
     */
    public function getNearbyVisibleShouts(Point $point, $offset = 0, $maxResults = 10)
    {
        return $this
            ->queryNearbyVisibleShouts($point, $offset, $maxResults)
            ->getResult()
        ;
    }
}
